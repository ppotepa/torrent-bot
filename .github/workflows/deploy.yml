name: Deploy Torrent Bot

on:
  push:
    branches: [ master ]
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create .env file from secrets
      run: |
        echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
        echo "JACKETT_API_KEY=${{ secrets.JACKETT_API_KEY }}" >> .env
        echo "JACKETT_URL=${{ secrets.JACKETT_URL }}" >> .env
        echo "QBITTORRENT_HOST=${{ secrets.QBITTORRENT_HOST }}" >> .env
        echo "QBITTORRENT_USERNAME=${{ secrets.QBITTORRENT_USERNAME }}" >> .env
        echo "QBITTORRENT_PASSWORD=${{ secrets.QBITTORRENT_PASSWORD }}" >> .env
        
    - name: Test bot configuration
      run: |
        python -c "
        import os
        from dotenv import load_dotenv
        load_dotenv()
        print('‚úÖ Configuration loaded successfully')
        print(f'üì± Bot Token: {os.getenv(\"TELEGRAM_BOT_TOKEN\", \"NOT_SET\")[:20]}...')
        print(f'üîß Jackett Key: {os.getenv(\"JACKETT_API_KEY\", \"NOT_SET\")}')
        print(f'üåê Jackett URL: {os.getenv(\"JACKETT_URL\", \"NOT_SET\")}')
        "
        
    # Add deployment steps here based on your hosting platform
    # Example for Docker deployment:
    - name: Build Docker image
      run: |
        docker build -t torrent-bot .
        
    # Example for direct deployment (uncomment and modify as needed):
    # - name: Deploy to server
    #   run: |
    #     # Add your deployment commands here
    #     # Could be SSH to your server, or cloud deployment
    #     echo "Deploy to your hosting platform"
