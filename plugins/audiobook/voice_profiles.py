#!/usr/bin/env python3
"""
Voice Profiles System - System profili g≈Çosowych dla bot TTS
Umo≈ºliwia tworzenie i zarzƒÖdzanie profilami syntezy g≈Çosu opartymi na pr√≥bkach referencyjnych
"""

import os
import json
import tempfile
import logging
from pathlib import Path
from typing import Dict, List, Optional, Any
import torch
import torchaudio

logger = logging.getLogger(__name__)

class VoiceProfileManager:
    """Manager profili g≈Çosowych"""
    
    def __init__(self, profiles_dir: str = "voice_profiles"):
        self.profiles_dir = Path(profiles_dir)
        self.profiles_dir.mkdir(exist_ok=True)
        
        # Profile configuration
        self.profiles_config_path = self.profiles_dir / "profiles.json"
        self.profiles = self._load_profiles()
        
        # Domy≈õlne profile
        self._initialize_default_profiles()
        
    def _load_profiles(self) -> Dict[str, Dict[str, Any]]:
        """≈Åaduje konfiguracjƒô profili z pliku"""
        if self.profiles_config_path.exists():
            try:
                with open(self.profiles_config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.warning(f"B≈ÇƒÖd ≈Çadowania profili: {e}")
        
        return {}
    
    def _save_profiles(self):
        """Zapisuje konfiguracjƒô profili do pliku"""
        try:
            with open(self.profiles_config_path, 'w', encoding='utf-8') as f:
                json.dump(self.profiles, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"B≈ÇƒÖd zapisu profili: {e}")
    
    def _initialize_default_profiles(self):
        """Inicjalizuje domy≈õlne profile g≈Çosowe"""
        default_profiles = {
            "pawel": {
                "name": "Pawe≈Ç (Tw√≥j g≈Ços)",
                "description": "Profil oparty na pr√≥bkach g≈Çosu Paw≈Ça",
                "type": "voice_cloning",
                "reference_samples": ["mowa.wav", "mowa-2.wav"],
                "speaker_embedding": "pawel_speaker_embedding.pt",
                "quality": "premium",
                "language": "polish",
                "voice_type": "male",
                "parameters": {
                    "voice_strength": 1.0,
                    "naturalness": 0.9,
                    "clarity": 0.8,
                    "emotional_tone": "neutral"
                }
            },
            "natural": {
                "name": "Naturalny Polski",
                "description": "Wysoka jako≈õƒá TTS bez klonowania g≈Çosu",
                "type": "enhanced_piper",
                "quality": "high",
                "language": "polish",
                "voice_type": "male",
                "parameters": {
                    "noise_scale": 0.333,
                    "length_scale": 1.1,
                    "noise_w": 0.4,
                    "sentence_silence": 0.1
                }
            },
            "expressive": {
                "name": "Ekspresyjny Polski",
                "description": "Ekspresyjny styl z wiƒôkszƒÖ emocjonalno≈õciƒÖ",
                "type": "enhanced_piper",
                "quality": "high",
                "language": "polish",
                "voice_type": "male",
                "parameters": {
                    "noise_scale": 0.4,
                    "length_scale": 1.05,
                    "noise_w": 0.5,
                    "sentence_silence": 0.15
                }
            },
            "fast": {
                "name": "Szybki",
                "description": "Szybka synteza z dobrƒÖ jako≈õciƒÖ",
                "type": "enhanced_piper",
                "quality": "good",
                "language": "polish",
                "voice_type": "male",
                "parameters": {
                    "noise_scale": 0.5,
                    "length_scale": 0.9,
                    "noise_w": 0.3,
                    "sentence_silence": 0.05
                }
            },
            "female": {
                "name": "Kobieta Naturalna",
                "description": "Naturalny kobiecy g≈Ços polski",
                "type": "enhanced_piper",
                "quality": "high",
                "language": "polish",
                "voice_type": "female",
                "parameters": {
                    "noise_scale": 0.333,
                    "length_scale": 1.15,
                    "noise_w": 0.35,
                    "sentence_silence": 0.12
                }
            }
        }
        
        # Dodaj domy≈õlne profile je≈õli nie istniejƒÖ
        for profile_id, profile_data in default_profiles.items():
            if profile_id not in self.profiles:
                self.profiles[profile_id] = profile_data
                logger.info(f"Dodano domy≈õlny profil: {profile_id}")
        
        self._save_profiles()
    
    def get_profile(self, profile_id: str) -> Optional[Dict[str, Any]]:
        """Pobiera profil po ID"""
        return self.profiles.get(profile_id)
    
    def list_profiles(self) -> Dict[str, str]:
        """Zwraca listƒô dostƒôpnych profili z opisami"""
        return {
            profile_id: profile_data.get("name", profile_id)
            for profile_id, profile_data in self.profiles.items()
        }
    
    def get_profile_description(self, profile_id: str) -> str:
        """Zwraca szczeg√≥≈Çowy opis profilu"""
        profile = self.get_profile(profile_id)
        if not profile:
            return f"‚ùå Profil '{profile_id}' nie istnieje"
        
        name = profile.get("name", profile_id)
        description = profile.get("description", "Brak opisu")
        quality = profile.get("quality", "unknown").title()
        language = profile.get("language", "unknown").title()
        voice_type = profile.get("voice_type", "unknown").title()
        profile_type = profile.get("type", "unknown")
        
        emoji = {
            "voice_cloning": "üé≠",
            "enhanced_piper": "üéµ",
            "openvoice": "üé§",
            "standard": "üîä"
        }.get(profile_type, "üéß")
        
        return f"{emoji} **{name}**\nüìù {description}\n‚öôÔ∏è Typ: {profile_type}\nüåü Jako≈õƒá: {quality}\nüåç Jƒôzyk: {language}\nüë§ G≈Ços: {voice_type}"
    
    def create_voice_cloning_profile(self, profile_id: str, name: str, reference_samples: List[str], 
                                   description: str = "", parameters: Optional[Dict] = None) -> bool:
        """
        Tworzy nowy profil voice cloning z pr√≥bek referencyjnych
        
        Args:
            profile_id: Unikalny identyfikator profilu
            name: Przyjazna nazwa profilu
            reference_samples: Lista ≈õcie≈ºek do pr√≥bek referencyjnych
            description: Opis profilu
            parameters: Dodatkowe parametry syntezy
            
        Returns:
            bool: True je≈õli sukces
        """
        try:
            # Sprawd≈∫ czy pr√≥bki istniejƒÖ
            for sample in reference_samples:
                if not os.path.exists(sample):
                    logger.error(f"Pr√≥bka nie istnieje: {sample}")
                    return False
            
            # Utw√≥rz profil
            profile_data = {
                "name": name,
                "description": description or f"Profil voice cloning: {name}",
                "type": "voice_cloning",
                "reference_samples": reference_samples,
                "speaker_embedding": f"{profile_id}_speaker_embedding.pt",
                "quality": "premium",
                "language": "polish",
                "voice_type": "male",  # Mo≈ºna wykryƒá automatycznie
                "parameters": parameters or {
                    "voice_strength": 1.0,
                    "naturalness": 0.9,
                    "clarity": 0.8,
                    "emotional_tone": "neutral"
                },
                "created_at": str(Path.cwd())
            }
            
            self.profiles[profile_id] = profile_data
            self._save_profiles()
            
            logger.info(f"Utworzono profil voice cloning: {profile_id}")
            return True
            
        except Exception as e:
            logger.error(f"B≈ÇƒÖd tworzenia profilu voice cloning: {e}")
            return False
    
    def create_enhanced_piper_profile(self, profile_id: str, name: str, voice_type: str = "male",
                                    quality: str = "high", parameters: Optional[Dict] = None,
                                    description: str = "") -> bool:
        """
        Tworzy nowy profil Enhanced Piper TTS
        
        Args:
            profile_id: Unikalny identyfikator profilu
            name: Przyjazna nazwa profilu
            voice_type: Typ g≈Çosu (male/female)
            quality: Jako≈õƒá (high/good/fast)
            parameters: Parametry syntezy
            description: Opis profilu
            
        Returns:
            bool: True je≈õli sukces
        """
        try:
            # Domy≈õlne parametry wed≈Çug jako≈õci
            quality_presets = {
                "high": {
                    "noise_scale": 0.333,
                    "length_scale": 1.1,
                    "noise_w": 0.4,
                    "sentence_silence": 0.1
                },
                "good": {
                    "noise_scale": 0.4,
                    "length_scale": 1.05,
                    "noise_w": 0.45,
                    "sentence_silence": 0.08
                },
                "fast": {
                    "noise_scale": 0.5,
                    "length_scale": 0.9,
                    "noise_w": 0.3,
                    "sentence_silence": 0.05
                }
            }
            
            # Utw√≥rz profil
            profile_data = {
                "name": name,
                "description": description or f"Profil Enhanced Piper: {name}",
                "type": "enhanced_piper",
                "quality": quality,
                "language": "polish",
                "voice_type": voice_type,
                "parameters": parameters or quality_presets.get(quality, quality_presets["good"]),
                "created_at": str(Path.cwd())
            }
            
            self.profiles[profile_id] = profile_data
            self._save_profiles()
            
            logger.info(f"Utworzono profil Enhanced Piper: {profile_id}")
            return True
            
        except Exception as e:
            logger.error(f"B≈ÇƒÖd tworzenia profilu Enhanced Piper: {e}")
            return False
    
    def delete_profile(self, profile_id: str) -> bool:
        """Usuwa profil"""
        if profile_id in self.profiles:
            del self.profiles[profile_id]
            self._save_profiles()
            logger.info(f"Usuniƒôto profil: {profile_id}")
            return True
        return False
    
    def get_synthesis_parameters(self, profile_id: str) -> Dict[str, Any]:
        """
        Zwraca parametry syntezy dla profilu
        
        Returns:
            Dict zawierajƒÖcy wszystkie potrzebne parametry do syntezy
        """
        profile = self.get_profile(profile_id)
        if not profile:
            # Fallback do domy≈õlnego profilu
            logger.warning(f"Profil '{profile_id}' nie istnieje, u≈ºywam 'natural'")
            profile = self.get_profile("natural")
            if not profile:
                # Ostateczny fallback
                return {
                    "type": "enhanced_piper",
                    "language": "polish",
                    "voice_type": "male",
                    "quality": "good",
                    "parameters": {
                        "noise_scale": 0.4,
                        "length_scale": 1.05,
                        "noise_w": 0.45,
                        "sentence_silence": 0.08
                    }
                }
        
        return {
            "type": profile.get("type", "enhanced_piper"),
            "language": profile.get("language", "polish"),
            "voice_type": profile.get("voice_type", "male"),
            "quality": profile.get("quality", "good"),
            "parameters": profile.get("parameters", {}),
            "reference_samples": profile.get("reference_samples", []),
            "speaker_embedding": profile.get("speaker_embedding")
        }

# Global instance
_voice_profile_manager = None

def get_voice_profile_manager() -> VoiceProfileManager:
    """Zwraca globalnƒÖ instancjƒô VoiceProfileManager"""
    global _voice_profile_manager
    if _voice_profile_manager is None:
        # Utw√≥rz folder w plugins/audiobook
        profiles_dir = Path(__file__).parent / "voice_profiles"
        _voice_profile_manager = VoiceProfileManager(str(profiles_dir))
    return _voice_profile_manager

def list_available_profiles() -> Dict[str, str]:
    """Szybki dostƒôp do listy profili"""
    return get_voice_profile_manager().list_profiles()

def get_profile_synthesis_params(profile_id: str) -> Dict[str, Any]:
    """Szybki dostƒôp do parametr√≥w syntezy"""
    return get_voice_profile_manager().get_synthesis_parameters(profile_id)
